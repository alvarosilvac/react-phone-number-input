{"version":3,"sources":["../source/BasicInput.js"],"names":["BasicInput","state","onChange","event","console","log","target","value","props","onInput","newValue","format","indexOf","slice","setState","storeInput","ref","input","country","metadata","text","focus","rest","$","trigger"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;AAEA;;;;;;;;;;;;AAEA;;;;;;IAOqBA,U;;;;;;;;;;;;;;4LAWpBC,K,GAAQ,E,QAERC,Q,GAAW,UAACC,KAAD,EACX;AACCC,WAAQC,GAAR,CAAY,aAAZ,EAA0BF,MAAMG,MAAN,CAAaC,KAAvC;AADD,qBAE+B,MAAKC,KAFpC;AAAA,OAESN,QAFT,eAESA,QAFT;AAAA,OAEmBO,OAFnB,eAEmBA,OAFnB,EAE0C;;AAF1C,OAGSF,KAHT,GAGmB,MAAKN,KAHxB,CAGSM,KAHT;;;AAKC,OAAIG,WAAW,8CAA2BP,MAAMG,MAAN,CAAaC,KAAxC,CAAf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAIG,aAAaH,KAAjB,EACA;AACC,QAAI,MAAKI,MAAL,CAAYD,QAAZ,EAAsBE,OAAtB,CAA8BT,MAAMG,MAAN,CAAaC,KAA3C,MAAsD,CAA1D,EACA;AACC;AACAG,gBAAWA,SAASG,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AACA;AACD;;AAED;AACA;AACA;AACA,SAAKC,QAAL,CAAc,EAAEP,OAAOG,QAAT,EAAd,EAAmC,YAAM;AAACN,YAAQC,GAAR,CAAY,iDAAZ,EAAgEH,SAASQ,QAAT,EAAoBN,QAAQC,GAAR,CAAY,uBAAZ,EAAsCI,QAAQC,QAAR,EAAmBN,QAAQC,GAAR,CAAY,0BAAZ;AAAwC,IAA/N,EA1BD,CA0BkO;AACjO,G,QAcDU,U,GAAa,UAACC,GAAD;AAAA,UAAS,MAAKC,KAAL,GAAaD,GAAtB;AAAA,G;;;;;yBAZNT,K,EACP;AAAA,gBAC+B,KAAKC,KADpC;AAAA,OACSU,OADT,UACSA,OADT;AAAA,OACkBC,QADlB,UACkBA,QADlB;;;AAGC,UAAO,qCAAkBZ,KAAlB,EAAyBW,OAAzB,EAAkCC,QAAlC,EAA4CC,IAAnD;AACA;;;0BAGD;AACC,QAAKH,KAAL,CAAWI,KAAX;AACA;;;2BAKD;AAAA,iBAUG,KAAKb,KAVR;AAAA,OAIEN,QAJF,WAIEA,QAJF;AAAA,OAKEgB,OALF,WAKEA,OALF;AAAA,OAMEC,QANF,WAMEA,QANF;AAAA,OAOEV,OAPF,WAOEA,OAPF;AAAA,OAQKa,IARL;;AAYC;AACA;AACA;;;AAdD,OAeSf,KAfT,GAemB,KAAKN,KAfxB,CAeSM,KAfT;;;AAiBC,UACC,oDACKe,IADL;AAEC,QAAG,iBAFJ;AAGC,SAAK,KAAKP,UAHX;AAIC,WAAO,KAAKJ,MAAL,CAAYJ,KAAZ,CAJR;AAKC,cAAU,KAAKL,QALhB;AAMC,aAAS,KAAKA;AANf,MADD;AAUA;;;;AAnFD;AACA;AACA;kDAEA;AAAA,OADkCK,KAClC,SADkCA,KAClC;;AACCgB,KAAE,kBAAF,EAAsBC,OAAtB,CAA8B,UAA9B;AACA,UAAO,EAAEjB,YAAF,EAAP;AACA;;;;;;kBATmBP,U","file":"BasicInput.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\n\nimport { parsePhoneNumberCharacters, formatPhoneNumber } from './input-control'\n\n/**\n * `BasicInput`'s caret is not as \"smart\" as the default `inputComponent`'s\n * but still works good enough. When erasing or inserting digits in the middle\n * of a phone number the caret usually jumps to the end: this is the expected\n * behaviour and it's the workaround for the [Samsung Galaxy smart caret positioning bug](https://github.com/catamphetamine/react-phone-number-input/issues/75).\n */\n@reactLifecyclesCompat\nexport default class BasicInput extends PureComponent\n{\n\t// Prevents React from resetting the `<input/>` caret position.\n\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t// https://github.com/facebook/react/issues/955\n\tstatic getDerivedStateFromProps({ value })\n\t{\n\t\t$('#childPhoneInput').trigger('onChange');\n\t\treturn { value }\n\t}\n\n\tstate = {}\n\n\tonChange = (event) =>\n\t{\n\t\tconsole.log('inside this',event.target.value)\n\t\tconst { onChange, onInput } = this.props //this props will send to parents\n\t\tconst { value } = this.state\n\n\t\tlet newValue = parsePhoneNumberCharacters(event.target.value)\n\n\t\t// By default, if a value is something like `\"(123)\"`\n\t\t// then Backspace would only erase the rightmost brace\n\t\t// becoming something like `\"(123\"`\n\t\t// which would give the same `\"123\"` value\n\t\t// which would then be formatted back to `\"(123)\"`\n\t\t// and so a user wouldn't be able to erase the phone number.\n\t\t// Working around this issue with this simple hack.\n\t\tif (newValue === value)\n\t\t{\n\t\t\tif (this.format(newValue).indexOf(event.target.value) === 0)\n\t\t\t{\n\t\t\t\t// Trim the last digit (or plus sign).\n\t\t\t\tnewValue = newValue.slice(0, -1)\n\t\t\t}\n\t\t}\n\n\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t// https://github.com/facebook/react/issues/955\n\t\tthis.setState({ value: newValue }, () => {console.log('1 i am setting the state in onchange BasicInput'); onChange(newValue); console.log('2 I continue to input'); onInput(newValue); console.log('3 done in basic onchange')}) //we are sending then the newValues to the props\n\t}\n\n\tformat(value)\n\t{\n\t\tconst { country, metadata } = this.props\n\n\t\treturn formatPhoneNumber(value, country, metadata).text\n\t}\n\n\tfocus()\n\t{\n\t\tthis.input.focus()\n\t}\n\n\tstoreInput = (ref) => this.input = ref\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\t// value,\n\t\t\tonChange,\n\t\t\tcountry,\n\t\t\tmetadata,\n\t\t\tonInput,\n\t\t\t...rest\n\t\t}\n\t\t= this.props\n\n\t\t// Prevents React from resetting the `<input/>` caret position.\n\t\t// https://github.com/reactjs/react-redux/issues/525#issuecomment-254852039\n\t\t// https://github.com/facebook/react/issues/955\n\t\tconst { value } = this.state\n\n\t\treturn (\n\t\t\t<input\n\t\t\t\t{...rest}\n\t\t\t\tid=\"childPhoneInput\"\n\t\t\t\tref={this.storeInput}\n\t\t\t\tvalue={this.format(value)}\n\t\t\t\tonChange={this.onChange}\n\t\t\t\tonInput={this.onChange}\n\t\t\t/>\n\t\t)\n\t}\n}"]}