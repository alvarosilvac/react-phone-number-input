{"version":3,"sources":["../source/PhoneInput.js"],"names":["PhoneNumberInput","props","value","country","countries","labels","international","metadata","parsed_number","pre_selected_country","state","country_select_options","generate_country_select_options","parsed_input","generate_parsed_input","new_country","onCountryChange","name","disabled","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectProperties","error","indicateInvalid","CountrySelectComponent","countrySelectComponent","inputComponent","smartCaret","ext","_","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","countrySelectHidesPhoneInputField","locale","phoneNumberInputProps","hidePhoneInputField","InputComponent","_countrySelectProps","key","hasOwnProperty","storeCountrySelectInstance","undefined","onCountrySelected","focus","storePhoneNumberInputInstance","onChange","onBlur","onPhoneNumberKeyDown","invalid","cloneElement","type","hasChangedCountry","old_default_country","old_value","new_default_country","new_value","new_state","trigger","propTypes","string","func","isRequired","onInput","onKeyDown","bool","arrayOf","objectOf","oneOfType","element","number","object","node","shape","country_calling_codes","defaultProps","old_parsed_input","old_country","new_parsed_input","setState","event","_event","target","stopPropagation","preventDefault","hide","number_input","country_select","FlagComponent","map","label","icon"],"mappings":"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","file":"PhoneInput.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\nimport classNames from 'classnames'\n\nimport SmartInput from './SmartInput'\nimport BasicInput from './BasicInput'\n\nimport InternationalIcon from './InternationalIcon'\nimport FlagComponent from './Flag'\n\nimport $ from 'jquery'\n\nimport\n{\n\tgetPreSelectedCountry,\n\tgetCountrySelectOptions,\n\tparsePhoneNumber,\n\tgenerateNationalNumberDigits,\n\tmigrateParsedInputForNewCountry,\n\tgetCountryForParsedInput,\n\te164\n}\nfrom './input-control'\n\nimport { countries } from './countries'\n\n// Allows passing custom `libphonenumber-js` metadata\n// to reduce the overall bundle size.\n@reactLifecyclesCompat\nexport default class PhoneNumberInput extends PureComponent\n{\n\tstatic propTypes =\n\t{\n\t\t// Phone number in E.164 format.\n\t\t// E.g. \"+12223333333\" for USA.\n\t\tvalue : PropTypes.string,\n\n\t\t// `onChange` handler is called each time\n\t\t// the phone number `<input/>` is edited.\n\t\tonChange : PropTypes.func.isRequired,\n\n\t\t//onInput handler\n\t\tonInput : PropTypes.func,\n\n\t\t// `onBlur` is usually passed by `redux-form`.\n\t\tonBlur : PropTypes.func,\n\n\t\t// `onKeyDown` handler (e.g. to handle Enter key press).\n\t\tonKeyDown : PropTypes.func,\n\n\t\t// Some people requested an `onCountryChange` event listener.\n\t\t// No valid reason was given other than compliance with some legacy code\n\t\t// which stored both phone number and country in a database.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/128\n\t\tonCountryChange : PropTypes.func,\n\n\t\t// Disables both the phone number `<input/>`\n\t\t// and the country `<select/>`.\n\t\t// (is `false` by default)\n\t\tdisabled : PropTypes.bool.isRequired,\n\n\t\t// Web browser's \"autocomplete\" feature\n\t\t// remembers the phone number being input\n\t\t// and can also autofill the `<input/>`\n\t\t// with previously remembered phone numbers.\n\t\t//\n\t\t// Default value: \"tel\".\n\t\t//\n\t\t// https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n\t\t//\n\t\t// \"So when should you use autocomplete=\"off\"?\n\t\t//  One example is when you've implemented your own version\n\t\t//  of autocomplete for search. Another example is any form field\n\t\t//  where users will input and submit different kinds of information\n\t\t//  where it would not be useful to have the browser remember\n\t\t//  what was submitted previously\".\n\t\t//\n\t\tautoComplete : PropTypes.string.isRequired,\n\n\t\t// Should the initially passed phone number `value`\n\t\t// be converted to a national phone number for its country.\n\t\t// (is `false` by default)\n\t\tdisplayInitialValueAsLocalNumber : PropTypes.bool.isRequired,\n\n\t\t// The country to be selected by default.\n\t\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\n\t\tcountry : PropTypes.string,\n\n\t\t// Only these countries will be available for selection.\n\t\t// Includes all countries by default.\n\t\tcountries : PropTypes.arrayOf(PropTypes.string).isRequired,\n\n\t\t// Custom country `<select/>` option names.\n\t\t// E.g. `{ ZZ: 'Международный', RU: 'Россия', US: 'США', ... }`\n\t\tlabels : PropTypes.objectOf(PropTypes.string),\n\n\t\t// Country flag icon components.\n\t\t// By default flag icons are inserted as `<img/>`s\n\t\t// with their `src` pointed to `flag-icon-css` github repo.\n\t\t// There might be cases (e.g. an offline application)\n\t\t// where having a large (3 megabyte) `<svg/>` flags\n\t\t// bundle is more appropriate.\n\t\t// `import flags from 'react-phone-number-input/flags'`.\n\t\tflags : PropTypes.objectOf(PropTypes.func),\n\n\t\t// Flag icon component.\n\t\tflagComponent : PropTypes.func.isRequired,\n\n\t\t// A base URL path for national flag SVG icons.\n\t\t// By default it uses the ones from `flag-icon-css` github repo.\n\t\tflagsPath : PropTypes.string.isRequired,\n\n\t\t// Whether to add the \"International\" option\n\t\t// to the list of countries.\n\t\t// By default it's added if the list of `countries` hasn't been overridden.\n\t\tinternational : PropTypes.bool,\n\n\t\t// Custom \"International\" country `<select/>` option icon.\n\t\tinternationalIcon : PropTypes.oneOfType\n\t\t([\n\t\t\tPropTypes.func,\n\t\t\tPropTypes.element\n\t\t])\n\t\t.isRequired,\n\n\t\t// Whether to show country `<select/>`.\n\t\t// (is `true` by default)\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\n\n\t\t// HTML `tabindex` attribute for the country `<select/>`.\n\t\tcountrySelectTabIndex : PropTypes.number,\n\n\t\t// `<Phone/>` component CSS style object.\n\t\tstyle : PropTypes.object,\n\n\t\t// `<Phone/>` component CSS class.\n\t\tclassName : PropTypes.string,\n\n\t\t// `<input/>` CSS class.\n\t\t// Both for the phone number `<input/>` and\n\t\t// `react-responsive-ui` `<Select/>` autocomplete input.\n\t\tinputClassName : PropTypes.string,\n\n\t\t// Returns phone number `<input/>` CSS class string.\n\t\t// Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\n\t\tgetInputClassName : PropTypes.func,\n\n\t\t// Country `<select/>` component.\n\t\t//\n\t\t// Receives properties:\n\t\t//\n\t\t// * `name : string?` — HTML `name` attribute.\n\t\t// * `value : string?` — The currently selected country code.\n\t\t// * `onChange(value : string?)` — Updates the `value`.\n\t\t// * `options : object[]` — The available countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\n\t\t// * `disabled : boolean?` — Whether the country select should be disabled.\n\t\t// * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\n\t\t// * `className : string` — CSS class name.\n\t\t//\n\t\t// Optional properties (should be ignored unless needed):\n\t\t//\n\t\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\n\t\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\n\t\t//\n\t\tcountrySelectComponent : PropTypes.func.isRequired,\n\n\t\t// Phone number `<input/>` component.\n\t\t//\n\t\t// Receives properties:\n\t\t//\n\t\t// * `metadata : object` — `libphonenumber-js` metadata.\n\t\t// * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\n\t\t// * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t\t// * `onChange(value : string)` — Updates the `value`.\n\t\t// * All other properties should be passed through to the underlying `<input/>`.\n\t\t//\n\t\t// Must also implement `.focus()` method.\n\t\t//\n\t\tinputComponent : PropTypes.func,\n\n\t\t// Set to `false` to use `inputComponent={BasicInput}`\n\t\t// instead of `input-format`'s `<ReactInput/>`.\n\t\t// Is `true` by default.\n\t\tsmartCaret : PropTypes.bool.isRequired,\n\n\t\t// For example, `react-responsive-ui` `<Select/>`\n\t\t// hides the phone number input field when expanded.\n\t\t// Is `false` by default.\n\t\tcountrySelectHidesPhoneInputField : PropTypes.bool.isRequired,\n\n\t\t// Phone number extension element.\n\t\text : PropTypes.node,\n\n\t\t// An error message shown below the phone number `<input/>`.\n\t\terror : PropTypes.string,\n\n\t\t// The `error` is shown only when `indicateInvalid` is true.\n\t\tindicateInvalid : PropTypes.bool,\n\n\t\t// Translation.\n\t\tlocale : PropTypes.objectOf(PropTypes.string),\n\n\t\t// `libphonenumber-js` metadata\n\t\tmetadata : PropTypes.shape\n\t\t({\n\t\t\tcountry_calling_codes : PropTypes.object.isRequired,\n\t\t\tcountries : PropTypes.object.isRequired\n\t\t})\n\t\t.isRequired\n\t}\n\n\tstatic defaultProps =\n\t{\n\t\t// Not disabled.\n\t\tdisabled: false,\n\n\t\t// Remember (and autofill) the value as a phone number.\n\t\tautoComplete: 'tel',\n\n\t\t// Include all countries.\n\t\tcountries,\n\n\t\t// Flag icon component.\n\t\tflagComponent: FlagComponent,\n\n\t\t// By default use icons from `flag-icon-css` github repo.\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t\t// Default \"International\" country `<select/>` option icon (globe).\n\t\tinternationalIcon: (props) => (\n\t\t\t<div className={ classNames('react-phone-number-input__icon', 'react-phone-number-input__icon--international', props && props.className) }>\n\t\t\t\t<InternationalIcon/>\n\t\t\t</div>\n\t\t),\n\n\t\t// Show country `<select/>`.\n\t\tshowCountrySelect: true,\n\n\t\t// Don't convert the initially passed phone number `value`\n\t\t// to a national phone number for its country.\n\t\t// The reason is that the newer generation grows up when\n\t\t// there are no stationary phones and therefore everyone inputs\n\t\t// phone numbers with a `+` in their smartphones\n\t\t// so phone numbers written in international form\n\t\t// are gradually being considered more natural than local ones.\n\t\tdisplayInitialValueAsLocalNumber: false,\n\n\t\t// Set to `false` to use `inputComponent={BasicInput}`\n\t\t// instead of `input-format`'s `<ReactInput/>`.\n\t\t// Is `true` by default.\n\t\tsmartCaret : false,\n\n\t\t// `react-responsive-ui` `<Select/>` sets this to true\n\t\t// to hide the phone number input field when expanded.\n\t\tcountrySelectHidesPhoneInputField : false\n\t}\n\n\tconstructor(props)\n\t{\n\t\tsuper(props)\n\n\t\tconst\n\t\t{\n\t\t\tvalue,\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tlabels,\n\t\t\tinternational,\n\t\t\tmetadata\n\t\t}\n\t\t= this.props\n\n\t\tconst parsed_number = parsePhoneNumber(value, metadata)\n\n\t\tconst pre_selected_country = getPreSelectedCountry\n\t\t(\n\t\t\tparsed_number,\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tinternational,\n\t\t\tmetadata\n\t\t)\n\n\t\tthis.state =\n\t\t{\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\n\t\t\tprops : this.props,\n\n\t\t\t// The country selected.\n\t\t\tcountry : pre_selected_country,\n\n\t\t\t// Generate country `<select/>` options.\n\t\t\tcountry_select_options : generate_country_select_options(this.props),\n\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\n\t\t\t// The reason is that there's no way of finding out\n\t\t\t// in which form should `value` be displayed: international or national.\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\n\t\t\t// and if a user entered `+7 800 555 35 35`\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\n\t\t\tparsed_input : generate_parsed_input(value, parsed_number, this.props),\n\n\t\t\t// `value` property is duplicated in state.\n\t\t\t// The reason is that `getDerivedStateFromProps()`\n\t\t\t// needs this `value` to compare to the new `value` property\n\t\t\t// to find out if `parsed_input` needs updating:\n\t\t\t// If the `value` property changed externally\n\t\t\t// then it won't be equal to state `value`\n\t\t\t// in which case `parsed_input` and `country` get updated.\n\t\t\tvalue\n\t\t}\n\t}\n\n\t// Country `<select/>` `onChange` handler.\n\tonCountrySelected = (new_country) =>\n\t{\n\t\tconst\n\t\t{\n\t\t\tmetadata,\n\t\t\tonChange,\n\t\t\tonInput,\n\t\t\tcountrySelectHidesPhoneInputField\n\t\t}\n\t\t= this.props\n\n\t\tconst\n\t\t{\n\t\t\tparsed_input : old_parsed_input,\n\t\t\tcountry      : old_country\n\t\t}\n\t\t= this.state\n\n\t\t// After the new `country` has been selected,\n\t\t// if the phone number `<input/>` holds any digits\n\t\t// then migrate those digits for the new `country`.\n\t\tconst new_parsed_input = migrateParsedInputForNewCountry\n\t\t(\n\t\t\told_parsed_input,\n\t\t\told_country,\n\t\t\tnew_country,\n\t\t\tmetadata\n\t\t)\n\n\t\tconst new_value = e164(new_parsed_input, new_country, metadata)\n\n\t\tthis.onCountryChange(new_country)\n\n\t\t// Focus the phone number `<input/>` upon country selection.\n\t\t// The default behaviour.\n\t\tif (!countrySelectHidesPhoneInputField) {\n\t\t\tthis.focus()\n\t\t}\n\n\t\tthis.setState\n\t\t({\n\t\t\tcountry           : new_country,\n\t\t\thasChangedCountry : true,\n\t\t\tparsed_input      : new_parsed_input,\n\t\t\tvalue             : new_value\n\t\t},\n\t\t() =>\n\t\t{\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\tonChange(new_value)\n\t\t\tonInput(new_value)\n\n\t\t\t// Focus the phone number `<input/>` upon country selection.\n\t\t\t// Doing it in a `setState()` callback because the phone number\n\t\t\t// `<input/>` is hidden while country `<select/>` is expanded.\n\t\t\tif (countrySelectHidesPhoneInputField) {\n\t\t\t\tthis.focus()\n\t\t\t}\n\t\t})\n\t}\n\n\t// Phone number `<input/>` `onKeyDown` handler.\n\tonPhoneNumberKeyDown = (event) =>\n\t{\n\t\tconst { onKeyDown } = this.props\n\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\n\t\t// if (event.keyCode === 40) {\n\t\t// \tthis.country_select.toggle()\n\t\t// }\n\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event)\n\t\t}\n\t}\n\n\t// `<input/>` `onChange` handler.\n\t// Updates `value` property accordingly.\n\t// (so that they are kept in sync).\n\t// `parsed_input` must be a parsed phone number\n\t// or an empty string.\n\t// E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\tonChange = (parsed_input) =>\n\t{\n\t\tconst\n\t\t{\n\t\t\tonChange,\n\t\t\tcountries,\n\t\t\tinternational,\n\t\t\tmetadata,\n\t\t\tonInput\n\t\t}\n\t\t= this.props\n\n\t\tlet { country } = this.state\n\n\t\tif (parsed_input)\n\t\t{\n\t\t\t// If the phone number being input is an international one\n\t\t\t// then tries to derive the country from the phone number.\n\t\t\t// (regardless of whether there's any country currently selected)\n\t\t\tif (parsed_input[0] === '+')\n\t\t\t{\n\t\t\t\tcountry = getCountryForParsedInput\n\t\t\t\t(\n\t\t\t\t\tparsed_input,\n\t\t\t\t\tcountry,\n\t\t\t\t\tcountries,\n\t\t\t\t\tinternational,\n\t\t\t\t\tmetadata\n\t\t\t\t)\n\n\t\t\t\tthis.onCountryChange(country)\n\t\t\t}\n\t\t\t// If this `onChange()` event was triggered\n\t\t\t// as a result of selecting \"International\" country\n\t\t\t// then force-prepend a `+` sign if the phone number\n\t\t\t// `<input/>` value isn't in international format.\n\t\t\telse if (!country)\n\t\t\t{\n\t\t\t\tparsed_input = '+' + parsed_input\n\t\t\t}\n\t\t}\n\n\t\t// Generate the new `value` property.\n\t\tconst value = e164(parsed_input, country, metadata)\n\n\t\tthis.setState\n\t\t({\n\t\t\tparsed_input,\n\t\t\tvalue,\n\t\t\tcountry\n\t\t},\n\t\t// Update the new `value` property.\n\t\t// Doing it after the `state` has been updated\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t() => {onChange(value); onInput(value)})\n\t}\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\n\t// Without this fix it just gets the actual (raw) input field textual value.\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\n\t//\n\t// A developer is not supposed to pass this `onBlur` property manually.\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t// and this component patches that `onBlur` handler (a hacky way but works).\n\t//\n\tonBlur = (event) =>\n\t{\n\t\tconst { onBlur } = this.props\n\t\tconst { value } = this.state\n\n\t\tif (!onBlur) {\n\t\t\treturn\n\t\t}\n\n\t\t// `event` is React's `SyntheticEvent`.\n\t\t// Its `.value` is read-only therefore cloning it.\n\t\tconst _event =\n\t\t{\n\t\t\t...event,\n\t\t\ttarget:\n\t\t\t{\n\t\t\t\t...event.target,\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\n\t\t// For `redux-form` event detection.\n\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t_event.stopPropagation = event.stopPropagation\n\t\t_event.preventDefault  = event.preventDefault\n\n\t\treturn onBlur(_event)\n\t}\n\n\t// When country `<select/>` is toggled.\n\thidePhoneInputField = (hide) =>\n\t{\n\t\tthis.setState({\n\t\t\thidePhoneInputField: hide\n\t\t})\n\t}\n\n\t// Some people requested an `onCountryChange` event listener.\n\t// No valid reason was given other than compliance with some legacy code\n\t// which stored both phone number and country in a database.\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/128\n\tonCountryChange(new_country)\n\t{\n\t\tconst { onCountryChange } = this.props\n\t\tconst { country } = this.state\n\n\t\tif (onCountryChange && new_country !== country)\n\t\t{\n\t\t\tonCountryChange(new_country)\n\t\t}\n\t}\n\n\t// Can be called externally.\n\tfocus = () => this.number_input.focus()\n\n\tstoreCountrySelectInstance = _ => this.country_select = _\n\n\tstorePhoneNumberInputInstance = _ => this.number_input = _\n\n\tstatic getDerivedStateFromProps(props, state)\n\t{\n\t\tconst\n\t\t{\n\t\t\tcountry,\n\t\t\thasChangedCountry,\n\t\t\tvalue,\n\t\t\tprops:\n\t\t\t{\n\t\t\t\tcountry : old_default_country,\n\t\t\t\tvalue   : old_value\n\t\t\t}\n\t\t}\n\t\t= state\n\n\t\tconst\n\t\t{\n\t\t\tmetadata,\n\t\t\tcountry : new_default_country,\n\t\t\tvalue   : new_value\n\t\t}\n\t\t= props\n\n\t\t// Emulate `prevProps` via `state.props`.\n\t\tconst new_state = { props }\n\n\t\t// If `countries` or `labels` or `international` changed\n\t\t// then re-generate country `<select/>` options.\n\t\tif (props.countries !== state.props.countries ||\n\t\t\tprops.labels !== state.props.labels ||\n\t\t\tprops.international !== state.props.international)\n\t\t{\n\t\t\tnew_state.country_select_options = generate_country_select_options(props)\n\t\t}\n\n\t\t// If the default country changed.\n\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\n\t\t// then select it but only if the user didn't previously select\n\t\t// another country and no phone number has been entered so far.\n\t\t// Because if the user has already started inputting a phone number\n\t\t// then he's okay with no country being selected at all (\"International\")\n\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\n\t\tif (new_default_country !== old_default_country && !hasChangedCountry && !value && !new_value)\n\t\t{\n\t\t\t$('#inputPhoneParent').trigger('onChange');\n\t\t\treturn {\n\t\t\t\t...new_state,\n\t\t\t\tcountry : new_default_country\n\t\t\t}\n\t\t}\n\t\t// If a new `value` is set externally.\n\t\t// (e.g. as a result of an ajax API request\n\t\t//  to get user's phone after page loaded)\n\t\t// The first part — `new_value !== old_value` —\n\t\t// is basically `props.value !== prevProps.value`\n\t\t// so it means \"if value property was changed externally\".\n\t\t// The second part — `new_value !== value` —\n\t\t// is for ignoring the `getDerivedStateFromProps()` call\n\t\t// which happens in `this.onChange()` right after `this.setState()`.\n\t\t// If this `getDerivedStateFromProps()` call isn't ignored\n\t\t// then the country flag would reset on each input.\n\t\telse if (new_value !== old_value && new_value !== value)\n\t\t{\n\t\t\tconst parsed_number = parsePhoneNumber(new_value, metadata)\n\t\t\t$('#inputPhoneParent').trigger('onChange');\n\t\t\treturn {\n\t\t\t\t...new_state,\n\t\t\t\tparsed_input : generate_parsed_input(new_value, parsed_number, props),\n\t\t\t\tvalue : new_value,\n\t\t\t\tcountry : new_value ? parsed_number.country : country\n\t\t\t}\n\t\t}\n\n\t\t// Maybe `new_state.country_select_options` changed.\n\t\t// In any case, update `prevProps`.\n\t\treturn new_state\n\t}\n\n\trender()\n\t{\n\t\tconst\n\t\t{\n\t\t\tname,\n\t\t\tdisabled,\n\t\t\tautoComplete,\n\t\t\tcountrySelectTabIndex,\n\t\t\tshowCountrySelect,\n\t\t\tstyle,\n\t\t\tclassName,\n\t\t\tinputClassName,\n\t\t\tgetInputClassName,\n\t\t\tcountrySelectProperties,\n\n\t\t\terror,\n\t\t\tindicateInvalid,\n\n\t\t\tcountrySelectComponent : CountrySelectComponent,\n\t\t\tinputComponent,\n\t\t\tsmartCaret,\n\t\t\text,\n\n\t\t\t// Extract `phoneNumberInputProps` via \"object rest spread\":\n\t\t\tcountries,\n\t\t\tlabels,\n\t\t\tcountry : _,\n\t\t\tflags,\n\t\t\tflagComponent,\n\t\t\tflagsPath,\n\t\t\tinternational,\n\t\t\tinternationalIcon,\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tonCountryChange,\n\t\t\tcountrySelectHidesPhoneInputField,\n\t\t\tlocale,\n\t\t\tmetadata,\n\t\t\t...phoneNumberInputProps\n\t\t}\n\t\t= this.props\n\n\t\tconst\n\t\t{\n\t\t\tcountry,\n\t\t\thidePhoneInputField,\n\t\t\tcountry_select_options,\n\t\t\tparsed_input\n\t\t}\n\t\t= this.state\n\n\t\tconst InputComponent = inputComponent || (smartCaret ? SmartInput : BasicInput)\n\n\t\t// Extract `countrySelectProperties` from `this.props`\n\t\t// also removing them from `phoneNumberInputProps`.\n\t\tconst _countrySelectProps = {}\n\t\tif (countrySelectProperties)\n\t\t{\n\t\t\tfor (const key in countrySelectProperties)\n\t\t\t{\n\t\t\t\tif (this.props.hasOwnProperty(key))\n\t\t\t\t{\n\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key]\n\t\t\t\t\tdelete phoneNumberInputProps[key]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={ style }\n\t\t\t\tclassName={ classNames('react-phone-number-input',\n\t\t\t\t{\n\t\t\t\t\t'react-phone-number-input--invalid': error && indicateInvalid\n\t\t\t\t},\n\t\t\t\tclassName) }>\n\n\t\t\t\t{/* Country `<select/>` and phone number `<input/>` */}\n\t\t\t\t<div className=\"react-phone-number-input__row\">\n\n\t\t\t\t\t{/* Country `<select/>` */}\n\t\t\t\t\t{ showCountrySelect &&\n\t\t\t\t\t\t<CountrySelectComponent\n\t\t\t\t\t\t\t{..._countrySelectProps}\n\t\t\t\t\t\t\tref={ this.storeCountrySelectInstance }\n\t\t\t\t\t\t\tname={ name ? `${name}__country` : undefined }\n\t\t\t\t\t\t\tvalue={ country }\n\t\t\t\t\t\t\toptions={ country_select_options }\n\t\t\t\t\t\t\tonChange={ this.onCountrySelected }\n\t\t\t\t\t\t\tonInput={ this.onCountrySelected }\n\t\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\t\ttabIndex={ countrySelectTabIndex }\n\t\t\t\t\t\t\thidePhoneInputField={ this.hidePhoneInputField }\n\t\t\t\t\t\t\tfocusPhoneInputField={ this.focus }\n\t\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{/* Phone number `<input/>` */}\n\t\t\t\t\t{ !hidePhoneInputField &&\n\t\t\t\t\t\t<InputComponent\n\t\t\t\t\t\t\tid=\"inputPhoneParent\"\n\t\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\t\tname={ name }\n\t\t\t\t\t\t\t{ ...phoneNumberInputProps }\n\t\t\t\t\t\t\tref={ this.storePhoneNumberInputInstance }\n\t\t\t\t\t\t\tmetadata={ metadata }\n\t\t\t\t\t\t\tcountry={ country }\n\t\t\t\t\t\t\tvalue={ parsed_input || '' }\n\t\t\t\t\t\t\tonChange={ this.onChange }\n\t\t\t\t\t\t\tonInput={ this.onChange }\n\t\t\t\t\t\t\tonBlur={ this.onBlur }\n\t\t\t\t\t\t\tonKeyDown={ this.onPhoneNumberKeyDown }\n\t\t\t\t\t\t\tdisabled={ disabled }\n\t\t\t\t\t\t\tautoComplete={ autoComplete }\n\t\t\t\t\t\t\tclassName={ classNames\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t'react-phone-number-input__phone',\n\t\t\t\t\t\t\t\t// Will be uncommented for version 2.x\n\t\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\t\t// \t'react-phone-number-input__phone--disabled' : disabled,\n\t\t\t\t\t\t\t\t// \t'react-phone-number-input__phone--invalid'  : error && indicateInvalid\n\t\t\t\t\t\t\t\t// },\n\t\t\t\t\t\t\t\tinputClassName,\n\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({ disabled, invalid: error && indicateInvalid })\n\t\t\t\t\t\t\t) }/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{/* Phone extension `<input/>` */}\n\t\t\t\t\t{ ext && !hidePhoneInputField &&\n\t\t\t\t\t\t<label className=\"react-phone-number-input__ext\">\n\t\t\t\t\t\t\t{labels && labels.ext || 'ext.'}\n\t\t\t\t\t\t\t{React.cloneElement(ext,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype : ext.props.type === undefined ? 'number' : ext.props.type,\n\t\t\t\t\t\t\t\tclassName : classNames\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__ext-input',\n\t\t\t\t\t\t\t\t\t// Will be uncommented for version 2.x\n\t\t\t\t\t\t\t\t\t// {\n\t\t\t\t\t\t\t\t\t// \t'react-phone-number-input__phone--disabled' : disabled,\n\t\t\t\t\t\t\t\t\t// },\n\t\t\t\t\t\t\t\t\tinputClassName,\n\t\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({ disabled }),\n\t\t\t\t\t\t\t\t\text.props.className\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t\t{/* Error message */}\n\t\t\t\t{ error && indicateInvalid &&\n\t\t\t\t\t<div className={ classNames('rrui__input-error', 'react-phone-number-input__error') }>\n\t\t\t\t\t\t{ error }\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n// Generates country `<select/>` options.\nfunction generate_country_select_options(props)\n{\n\tconst\n\t{\n\t\tcountries,\n\t\tlabels,\n\t\tflags,\n\t\tflagsPath,\n\t\tflagComponent : FlagComponent,\n\t\tinternational,\n\t\tinternationalIcon\n\t}\n\t= props\n\n\treturn getCountrySelectOptions\n\t(\n\t\tcountries,\n\t\tlabels,\n\t\tinternational\n\t)\n\t.map(({ value, label }) =>\n\t({\n\t\tvalue,\n\t\tlabel,\n\t\ticon : value ? (props) => <FlagComponent country={value} flags={flags} flagsPath={flagsPath} className={props ? props.className : undefined}/> : (typeof internationalIcon === 'function' ? internationalIcon : () => internationalIcon)\n\t}))\n}\n\nfunction generate_parsed_input(value, parsed_number, props)\n{\n\tconst\n\t{\n\t\tdisplayInitialValueAsLocalNumber,\n\t\tmetadata\n\t}\n\t= props\n\n\t// If the `value` (E.164 phone number)\n\t// belongs to the currently selected country\n\t// and `displayInitialValueAsLocalNumber` property is `true`\n\t// then convert `value` (E.164 phone number)\n\t// to a local phone number digits.\n\t// E.g. '+78005553535' -> '88005553535'.\n\tif (displayInitialValueAsLocalNumber && parsed_number.country)\n\t{\n\t\treturn generateNationalNumberDigits(parsed_number, metadata)\n\t}\n\n\treturn value\n}"]}